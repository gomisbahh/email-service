

# Pub/Sub settings for email notifications
gcp.project-id=106917695099
gcp.pubsub.email-topic-id=app-integration-mails

# Pub/Sub consumer settings
gcp.pubsub.email-subscription-id=app-integration-mails-sub

# The 'consumer-mode' property is not used by the current streaming consumer implementation.
# Use 'gcp.pubsub.consumer.auto-start' to control if the consumer starts on application boot.
gcp.pubsub.consumer.auto-start=true
# Automatically stop the consumer if the mail server is unhealthy to prevent message retries.
gcp.pubsub.consumer.stop-when-mailserver-down=true
# The delay (in milliseconds) between health checks for the mail server.
gcp.pubsub.consumer.health-check-delay-ms=30000


# Dead-letter topic settings
# The topic where undeliverable messages will be sent.
gcp.pubsub.email-dlt-topic-id=app-integration-mails-dead
gcp.pubsub.consumer.max-delivery-attempts=5
# Flow control settings to prevent the consumer from being overloaded.
# This limits the number of unacknowledged messages the subscriber holds in memory.
gcp.pubsub.consumer.flow-control.max-messages=10


# Pub/Sub DLT consumer settings
gcp.pubsub.email-dlt-subscription-id=app-integration-mails-dead-sub
gcp.pubsub.dlt-consumer.auto-start=true


# email server with auth
# spring.mail.host=smtp.freesmtpservers.com
# spring.mail.port=25
# spring.mail.username=misbahh@gmail.com
# spring.mail.password=${SPRING_MAIL_PASSWORD}
# spring.mail.properties.mail.smtp.auth=true
# spring.mail.properties.mail.smtp.starttls.enable=true

# email server without auth
spring.mail.host=sandbox.smtp.mailtrap.io
spring.mail.port=2525
spring.mail.username=
spring.mail.password=
spring.mail.properties.mail.smtp.auth=true
spring.mail.properties.mail.smtp.starttls.enable=false


# --------------------------------------------------------------------------------
# ACTUATOR (Health & Info Endpoints)
# --------------------------------------------------------------------------------
# Expose only the 'health' and 'info' endpoints over HTTP.

# Set the logging level for the mail health indicator to ERROR to suppress WARN-level stack traces on connection failure.
logging.level.org.springframework.boot.actuate.mail.MailHealthIndicator=ERROR
management.endpoints.web.exposure.include=health,info

# Show full health details, including components like DB, disk space, etc.
management.endpoint.health.show-details=always
management.health.mail.enabled=true
management.endpoint.health.group.components.exclude=mail

# Isolate the mail health check into a separate group to prevent it from affecting the main /health endpoint.
# This prevents the entire application from being marked as DOWN if the mail server is unavailable.
# The mail health status can be checked specifically at /actuator/health/components
# management.endpoint.health.group.components.exclude=mail
management.endpoints.web.base-path=/

# Custom application information for the /actuator/info endpoint
info.app.name=@project.name@
info.app.description=@project.description@
info.app.version=@project.version@

# --------------------------------------------------------------------------------
# DISTRIBUTED TRACING (Micrometer with OpenTelemetry)
# --------------------------------------------------------------------------------
# Set sampling probability to 1.0 to trace every request.
# For production, you might want to lower this value (e.g., 0.1 for 10%).
# management.tracing.sampling.probability=1.0

# --------------------------------------------------------------------------------
# SERVER & SWAGGER CONFIGURATION
# --------------------------------------------------------------------------------
# Forward headers for proxy/gateway environments
server.forward-headers-strategy=framework

# SpringDoc/Swagger configuration for reverse proxy environments
# This ensures that Swagger UI generates relative paths that include the gateway prefix (e.g., /demo-app).
springdoc.swagger-ui.use-root-path=false